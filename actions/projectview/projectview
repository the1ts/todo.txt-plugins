#!/usr/bin/env bash
# shellcheck shell=bash
#===============================================================================
#
#          FILE: projectview
#
#         USAGE: todo.sh projectview [TERM]
#
#        AUTHOR: Paul Mansfield (paul.mansfield@mansteck.co.uk), 
#     COPYRIGHT: 2009-2021 Paul Mansfield
#       LICENSE: GPL, http://www.gnu.org/copyleft/gpl.html
#===============================================================================

usage () {
	echo "    $(basename "$0") [TERM...]"
	echo "      Show todo items containing TERM, grouped by project, and displayed"
	echo "      in priority order. If no TERM provided, displays entire todo.txt."
	echo "      If any TERMs are a project it uses the non-project terms"
  echo "      to search within these projects"
}

die () {
  if [[ -n $* ]]; then
    echo -e "$*"
  fi
  usage
	exit 1
}

# Usage for todo.sh help or remove action
if [[ "${1}" =~ (usage|help|--help) ]] || [[ "${2}" =~ (usage|help|--help) ]]; then
  usage
	exit
elif [[ "${1}" = "$(basename "$0")" ]]; then
  shift
fi

## Variables
# Stop Verbose lines, thanks to Mark Harrison
export TODOTXT_VERBOSE=0
# Stop filter now and run in a controlled manner after the _list function is run
export TODOTXT_DISABLE_FILTER=1
# Limit to show requested projects
PROJECT_LIMIT=0
# Check how we are being run
HOWRUN=$(basename "$0")
# If being run as simplepv then turn off all colours and
# wrap at 40 characters
# Useful for display outside of terminal
if [[ "${HOWRUN}" = "simplepv" ]] ; then
	export 	TODOTXT_PLAIN=1
	export 	PRI_X=$NONE
	export 	PRI_A=$NONE
	export 	PRI_B=$NONE
	export 	PRI_C=$NONE
	export 	DEFAULT=$NONE
	export 	COLOR_DONE=$NONE
  export  COLOR_CONTEXT=$NONE
  export  COLOR_PROJECT=$NONE
  export  COLOR_NOTE=$NONE
  export  TODO_TXT_FINAL_FILTER="cat"

  # Check if we want to wrap text or not
	if [[ "$1" = "--nowrap" ]]; then
		shift
    # Set final filter
    if [[ -f /usr/bin/fmt ]] ; then
      TODOTXT_FINAL_FILTER="$TODOTXT_FINAL_FILTER | fmt -t -w 40"
    fi
  fi
fi

# Eat the remaining arguments putting them into project or terms variables
while [[ $# -gt 0 ]]; do
  if [[ $(grep -c "+\w" <<< "$1") -eq 1 ]]; then
    PROJECTS="${1/#+/}"; shift
		PROJECT_LIMIT=1
	else
    TERMS="$(echo "$1" | cut -d ' ' -f 1)"; shift
	fi
done

# If we have non-valid projects error out
for project in ${PROJECTS}; do
  if ! [[ $(grep -c "${project}" "${TODO_FILE}") -gt 0  ]]; then
    die "      project \"${project}\" not found in todo.txt"
  fi
done

# if we have terms not in todo.txt error
OLD_TODOTXT_VERBOSE=${TODOTXT_VERBOSE:-1}
TODOTXT_VERBOSE=0 VALID_TERM=$(_list "${TODO_FILE}" "" "${TERMS}" | wc -l)
TODOTXT_VERBOSE=${OLD_TODOTXT_VERBOSE}
if [[ "${VALID_TERM}" -eq 0 ]]; then
  die "      \"${TERMS}\" not found in todo.txt"
fi

# If we have no valid terms in valid projects error out
for project in ${PROJECTS}; do
  VALID_TERM=$(grep "${project}" "${TODO_FILE}" | grep -c "${TERMS}")
  if [[ "${VALID_TERM}" -eq 0 ]]; then
    die "      \"${TERMS}\" not found in project \"${project}\" in todo.txt"
  fi
done

# If we have no projects or terms, set to all projects
if [[ -z "${PROJECTS}" ]] && [[ -z "${TERMS}" ]]; then
  PROJECTS=$("${TODO_FULL_SH}" listproj |sed 's/+//g')
fi

# Show projects in alphabetical order and todo items in priority order
echo "=====  Projects  ====="
  if [ "${HOWRUN}" != "simplepv" ] ; then
    echo  ""
  fi

# For each project show header and the list of todo items
for project in $PROJECTS ; do 
	# Use core _list function, does numbering and colouring for us
	PROJECT_LIST=$(_list "$TODO_FILE" "+${project}\b" "${TERMS}" \
		| sed "s/\ \x1b\[[0-9;]*m+[a-zA-Z0-9._:\-]*\b//g")
	if [[ -n "${PROJECT_LIST}" ]]; then
		echo  "---  ${project}  ---"
		echo  "${PROJECT_LIST}" | eval "${TODOTXT_FINAL_FILTER}"
		# If run as simplepv don't add newlines
		if [ "${HOWRUN}" != "simplepv" ] ; then
			echo  ""
		fi
	fi
done

# Show todo items not associated to a project and we haven't limited to certain
# projects 
if [[ "${PROJECT_LIMIT}" -ne 1 ]]; then
	PROJECT_LIST=$(_list "${TODO_FILE}" "-+[a-zA-Z0-9._:\-]*\b" "${TERMS}" )
	if [[ -n "${PROJECT_LIST}" ]]; then
		echo "--- Not in projects ---"
		echo "${PROJECT_LIST}" | eval "${TODOTXT_FINAL_FILTER}"
	fi
fi