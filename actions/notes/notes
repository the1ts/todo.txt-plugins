#!/usr/bin/env bash
# shellcheck shell=bash
#===============================================================================
#
#          FILE: notes
#
#         USAGE: todo.sh notes [add|archive|cat|edit|grep|list|listarchived|rename|unarchive]
#
#        AUTHOR: Paul Mansfield (paul.mansfield@mansteck.co.uk), 
#     COPYRIGHT: 2009-2022 Paul Mansfield
#       LICENSE: GPL, http://www.gnu.org/copyleft/gpl.html
#===============================================================================

usage () {
	echo "    $(basename "$0") [add|archive|cat|edit|grep|list|listarchived|rename|unarchive]"
}

die () {
  [[ -f "${TODO_TMP_FILE}" ]] && rm -rf "${TODO_TMP_FILE}"
	exit 1
}

find_editor () {
# Find editor to use, if EDITOR already set use.
# Else use debian and derivatives editor (alternatives auto set by OS)
# finally if neither EDITOR nor alternative set default to vi
  if [[ -n ${EDITOR} ]]; then
    true
	elif [[ -L /usr/bin/editor ]]; then
		EDITOR="/usr/bin/editor"
	elif [[ -z "${EDITOR}" ]]; then
		EDITOR="vi"
	fi
  echo "${EDITOR}"
}

todo_tmp () {
  # Create file from todo and 'tickled' files if required
  cat "${TODO_FILE}" > "${TODO_TMP_FILE}"
  if [ -n "${TICKLER_DIR}" ]; then
    find "${TICKLER_DIR}" -mindepth 2 -type f -size 1 -exec cat {} \; >>"${TODO_TMP_FILE}"
  fi
}

# Usage for todo.sh help or remove action
# Remove notes todo.txt action name
if [[ "${2}" =~ (usage|help|--help) ]] || [[ "${3}" =~ (usage|help|--help) ]]; then
	usage
	exit
elif [[ "${1}" = "$(basename "$0")" ]]; then
  shift
  action=$1
  shift
fi

if ! [[ "${action}" =~ (add|archive|cat|edit|grep|list|listarchived|rename|unarchive) ]]; then
  usage
fi

# Check notes and archive exist
mkdir -p "${TODO_DIR}/notes/archive" || exit 1
cd "${TODO_DIR}/notes" || exit 1

PRE="$(basename "${TODO_FILE}")"; PRE=${PRE/%\.txt/}
NOTES=$(find . -maxdepth 1 -name "${PRE}*txt" -printf '%P\n')
TODO_TMP_FILE="${TODO_TMP_FILE:-${TODO_DIR}/todo.tmp}"

_add () {
  localUsage () {
    echo "    $(basename "$0") ${action} [ITEMS] [NOTESFILE]"
    echo "      append NOTESFILE to ITEMS and edit NOTESFILE if new"
  }

  if [[ "$#" -lt 2 ]]; then
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
      echo "      No item given"
      localUsage
      die
    fi
  fi
  # Set notes file from last argument and remove from arguments
  # this leaves only items which we test later
  NOTES_FILE=${!##note:}
  set -- "${@:1:$(($#-1))}"
  # If our notes file is just numbers we didn't get given one
  if [[ "${NOTES_FILE}" =~ ^[0-9]+$ ]]; then
    echo "      No notesfile given"
    localUsage
    die
  fi

  # Are items in the file?
  # shellcheck disable=SC2048
  for item in $*; do
    if [[ ${item} -gt $(wc -l "${TODO_FILE}" | cut -f 1 -d " ") ]]; then
      echo "      ITEM ${item} not in todo file"
      localUsage
      die
    elif ! [[ "${item}" =~ ^[0-9]+$ ]]; then
      echo " ITEM is not a number"
      localUsage
      die
    else
      "${TODO_FULL_SH}" append "${item}" "note:${NOTES_FILE}"
      echo "$(getPrefix "${TODO_FILE}"): note:${NOTES_FILE} added to item ${item}"
    fi
  done

  # Can we edit after addition?
  # Only set if file new to todo.txt and note doesn't exist
  # Also check we have notesedit addon installed
  if [[ "${NOTE_ADD_EDIT}" = "OFF" ]] && \
    [[ $(grep -c "${NOTES_FILE}" "${TODO_FILE}") -eq 0 ]] && \
    ! [[ -f "${TODOTXT_DIR}/notes/${PRE}-${NOTES}.txt" ]] && \
    [[ $(${TODO_FULL_SH} listaddons | grep -c ^notesedit$) -eq 1 ]]; then
    "${TODO_FULL_SH}" notesedit "note:${NOTES_FILE}"
  fi
}

_archive (){
  localUsage () {
    echo "    $(basename "$0") ${action}"
    echo "      Archive NOTESFILE not in todo.txt"
  }

  todo_tmp

  # for each file, remove $PRE and see if its in todo or 'tickled' files
  for i in ${NOTES} ; do
    i="${i/#${PRE}-/}"; NOTE_FILE="${i/%\.txt/}"
    # Number of times note appears in todo.txt
    NUM_NOTE=$(grep -c "\bnote:${NOTE_FILE}\b" "${TODO_TMP_FILE}")
    if [[ "${NUM_NOTE}" -eq 0 ]] ;then
      cat "${TODO_DIR}/notes/${PRE}-${NOTE_FILE}.txt" >> \
        "${TODO_DIR}/notes/archive/${PRE}-${NOTE_FILE}.$(date +%s).txt"
      echo "$(getPrefix): Archived note:${NOTE_FILE}"
      ((RETURN+=1)) 
      if [[ $? -eq 1 ]]; then
        echo "      unable to create archive file"
        localUsage
        die
      else
        rm "${TODO_DIR}/notes/${PRE}-${NOTE_FILE}.txt"
      fi
    fi
  done

  [[ -f "${TODO_TMP_FILE}" ]] && rm -rf "${TODO_TMP_FILE}"

  # if we have not archived anything, then report
  if [[ -z "${RETURN}" ]]; then
    echo "$(getPrefix): Nothing to archive"
    exit 1
  fi
}

_cat (){
  localUsage () {
    echo "    $(basename "$0") ${action}"
    echo "      Archive NOTESFILE not in todo.txt"
  }

  if [[ $# -lt 1 ]]; then
    echo "      No notes file"
    localUsage
    die
  fi

  NOTES_FILE="${1/#note:/}"; shift

  if  [[ $(grep -c "${NOTES_FILE}" "${TODO_FILE}") -lt 1 ]]; then
    echo "      Notes file ${NOTES_FILE} not in todo.txt file,"
    echo "      use listnotes to find notes files"
    localUsage
    die
  fi

  if [ -e "${TODO_DIR}/notes/${PRE}-${NOTES_FILE}.txt" ]; then
    if ! cat "${TODO_DIR}/notes/${PRE}-${NOTES_FILE}.txt" 2> /dev/null; then
      echo "    Unable to find or show ${PRE}-${NOTES_FILE}.txt"
      localUsage
      die
    fi
  fi
}

_edit () {
  localUsage () {
    echo "    $(basename "$0") ${action}"
    echo "      Edit notes file, \$EDITOR."
    echo "      use listnotes to get list of notes files"
  }

  NOTES_FILE="${1/#note:/}"; shift
  EDITOR=$(find_editor)

  if [[ -z "${NOTES_FILE}" ]]; then
    echo "      No notes file"
    localUsage
    die
  elif [[ $(grep -c "note:${NOTES_FILE}" "${TODO_FILE}") -eq 0 ]]; then
    echo "      No such notes file, use listnotes to find notes files"
    localUsage
    die
  fi

  todo_tmp

  # If file or note:file exists edit
  NUM_ENOTE=$(grep -c "[^ ]*enote:${NOTES_FILE}[^ ]\+" "${TODO_TMP_FILE}")
  if [[ -e "${PRE}-${NOTES_FILE}.txt" ]] || [[ "${NUM_ENOTE}" -ge 1 ]]; then
    "${EDITOR}" "${PRE}-${NOTES_FILE}.txt"
  fi
  [[ -f "${TODO_TMP_FILE}" ]] && rm -rf "${TODO_TMP_FILE}"
}

_grep () {
  localUsage () {
    echo "    $(basename "$0") ${action} -a [TERM...]"
    echo "      List notes that contain a TERM within them"
    echo "      -a show archived notes"
  }

  if [[ -z "$1" ]]; then
    echo "    No TERM"
    localUsage
    die
  fi

  ARCHIVED="$(find -- archive/* -name "${PRE}-*.txt" -printf "%p\n")"
  if [[ "$1" = "-a" ]]; then
    ARCHIVE=1; shift
  fi

  ## Main
  TOTAL_NOTES=0
  for item in ${NOTES}; do
    # shellcheck disable=SC2086
    if [[ "$(grep -oc "$*" ${item})" -gt 0 ]]; then
    ((TOTAL_NOTES=+1))
    fi
  done
  TOTAL_ARCHIVED=0
  for item in ${ARCHIVED}; do
    # shellcheck disable=SC2086
    if [[ "${ARCHIVE}" -eq 1 ]] && [[ "$(grep -oc "$*" ${item})" -gt 0 ]]; then
      ((TOTAL_ARCHIVED=+1))
    fi
  done

  if [[ "${TOTAL_NOTES}" -gt 0 ]]; then
    echo "Notes Files containing \"$*\""
    echo "-----------"
    # shellcheck disable=SC2086
    grep -l "$*" ${NOTES} | sed "s/^.*${PRE}-/note:/g ; s/[.]txt$//g"
  else
    echo "No current Notes containing \"$*\""
    ((RETURN+=1))
  fi
  if [[ ${ARCHIVE} -eq 1 ]]; then
    if [ ${TOTAL_ARCHIVED} -gt 0 ]; then
      echo ""
      echo "Archived Notes Files containing \"$*\""
      echo "--------------------"
      # shellcheck disable=SC2086
      grep -l "$*" ${ARCHIVED} | sed -e "s/^.*${PRE}-/note:/g" \
      -e "s/[.]txt$//g" -e "s/\.[0-9]\{1,10\}$//g"
    else
      echo "No archived Notes containing \"$*\""
      ((RETURN+=1))
    fi
  fi
  if [[ ${RETURN} -gt 0 ]]; then
    exit 1
  fi
}

_list () {
  localUsage () {
    echo "    $(basename "$0") ${action} -a [TERM...]"
    echo "      List notes"
    echo "      -a show archived notes"
  }

  todo_tmp

  if [[ $(grep -o '\bnote\:[a-zA-Z0-9\._-]*' "${TODO_TMP_FILE}" | grep -c "$*") -gt 0 ]]; then
    grep -o '\bnote\:[a-zA-Z0-9\._-]*' "${TODO_TMP_FILE}" | grep "$*" | sort -u
    [[ -f "${TODO_TMP_FILE}" ]] && rm -rf "${TODO_TMP_FILE}"
  else
    echo "      No notes with the term \"$*\""
    localUsage
    die
  fi
}

_listarchived () {
  localUsage () {
    echo "    $(basename "$0") ${action} [TERM...]"
    echo "      List archived notes"
  }
  cd archive || exit 1

  # Find a list of files
  find . -name "${PRE}-*txt" -printf '%P\n'  | grep "^${PRE}-" | \
    sed  -e "s/${PRE}-//" -e "s/^/note:/" -e "s/.txt$//" -e "s/\.[0-9]\{1,10\}$//g" | 
    sort > "${TODO_TMP_FILE}"
  if [[ $(grep -c "$*" "${TODO_TMP_FILE}") -gt 0 ]]; then
    grep "$*" "${TODO_TMP_FILE}"
    [[ -f "${TODO_TMP_FILE}" ]] && rm -rf "${TODO_TMP_FILE}"
  else
    echo "      No notes with the term \"$*\""
    localUsage
    die
  fi
}

_rename () {
  localUsage () {
    echo "    $(basename "$0") ${action} [ORIGINAL_NOTESFILE] [NEW_NOTESFILE]"
    echo "      rename ORIGINAL_NOTESFILE to NEW_NOTESFILE"
    echo "      the note: is not required, but added"
  }

  if [[ "$#" -ne 2 ]]; then
    echo "    check number of options"
    localUsage
    die
  fi

  OLD_FILE=${1/#note:/}
  NEW_FILE=${2/#note:/}

  # Move the note
  if [[ "$(grep -c "${OLD_FILE}" "${TODO_FILE}")" -ge 1 ]]; then
    sed -i "s/note:${OLD_FILE}\b/note:${NEW_FILE}/g" "${TODO_FILE}"
    echo "$(getPrefix): Changed note:${OLD_FILE} to note:${NEW_FILE} in todo.txt"
    ((UPDATE+=1))
  fi
  # shellcheck disable=SC2153
  if [[ "$(grep -c "${OLD_FILE}" "${DONE_FILE}")" -ge 1 ]]; then
    sed -i "s/note:${OLD_FILE}\b/note:${NEW_FILE}/g" "${DONE_FILE}"
    echo "$(getPrefix): Changed note:${OLD_FILE} to note:${NEW_FILE} in done.txt"
    ((UPDATE+=1))
  fi
  if [[ -z "${UPDATE}" ]]; then
    echo "    ${OLD_FILE} is not a current note, use listnotes to find notes."
    localUsage
    die
  fi

  # rename OLD_FILE
  if [[ -f "${PRE}-${OLD_FILE}.txt" ]]; then
    mv "${PRE}-${OLD_FILE}.txt" "${PRE}-${NEW_FILE}.txt"
  fi

  # Test for OLD_FILE in 'tickled' files and rename
  if [[ -n ${TICKLER_DIR} ]]; then
    TICKLED="$(find "${TICKLER_DIR}" -mindepth 2 -type f -size 1 -exec grep -l "${OLD_FILE}" {} \;)"
    for FILE in ${TICKLED}; do
      sed -i "s/note:${OLD_FILE}\b/note:${NEW_FILE}" "${FILE}"
      echo "$(getPrefix): Changed note:${OLD_FILE} to note:${NEW_FILE} in tickled file ${FILE}"
    done
  fi
}

_unarchive () {
  localUsage () {
    echo "    $(basename "$0") ${action} [NOTESFILE]"
    echo "      unarchive notes files, this brings back the last"
  }

  cd archive || exit 1

  NOTES_FILE=${1/#note:/}; shift
  DATE_FILE=$(find -- * -name "${PRE}-${NOTES_FILE}.*.txt" -type f -printf "%T@ %p\n"  2> /dev/null | sort -n | cut -f 2 -d " "  | tail -n 1)
  ARC_FILE="${TODO_DIR}/notes/archive/${DATE_FILE}"

  todo_tmp

  if [[ -z "${DATE_FILE}" ]]; then
    echo "      No archived notes file named ${NOTES_FILE}. Use notes listarchived to find them"
    localUsage
    die
  elif [[ "$(grep -c "\bnote:${NOTES_FILE}\b" "${TODO_TMP_FILE}")" -eq 0 ]] ;then
    echo "      Note file ${NOTES_FILE} not mentioned in todo"
    echo "      use listnotes to find them"
    localUsage
    die
  fi

  cp "${ARC_FILE}" "${TODO_DIR}/notes/${PRE}-${NOTES_FILE}.txt"
  if [[ "$?" -eq 1 ]]; then
    echo "     Unable to move ${PRE}-${NOTES_FILE}.txt to ${NO_DATE_FILE}.txt"
    localUsage
    die
  else
    echo "$(getPrefix): Notes file ${PRE}-${NOTES_FILE}.txt restored from newest archive"
  fi

  [[ -f "${TODO_TMP_FILE}" ]] && rm -rf "${TODO_TMP_FILE}"
}

# We actually want white space separated options so no quotes on our $@
case ${action} in
  add)
    # shellcheck disable=SC2068
    _add $@
  ;;
  archive)
    # shellcheck disable=SC2068
    _archive $@
  ;;
  cat)
    # shellcheck disable=SC2068
    _cat $@
  ;;
  edit)
    # shellcheck disable=SC2068
    _edit $@
  ;;
  grep)
    # shellcheck disable=SC2068
    _grep $@
  ;;
  list)
    # shellcheck disable=SC2068
    _list $@
  ;;
  listarchived)
    # shellcheck disable=SC2068
    _listarchived $@
  ;;
  rename)
    # shellcheck disable=SC2068
    _rename $@
  ;;
  unarchive)
    # shellcheck disable=SC2068
    _unarchive $@
  ;;
  *)
    usage
  ;;
esac