#!/usr/bin/env bash
# shellcheck shell=bash
#===============================================================================
#
#          FILE: notesrename
#
#         USAGE: todo.sh notesrename Original_notesfile new_notesfile
#
#        AUTHOR: Paul Mansfield (paul.mansfield@mansteck.co.uk), 
#     COPYRIGHT: 2009-2021 Paul Mansfield
#       LICENSE: GPL, http://www.gnu.org/copyleft/gpl.html
#===============================================================================

# functions
usage () {
	echo "    $(basename "$0") [ORIGINAL_NOTESFILE] [NEW_NOTESFILE]"
	echo "      rename ORIGINAL_NOTESFILE to NEW_NOTESFILE"
	echo "      the note: is not required, but added"
}

# Function to take ENOTEFILE and standardize
_note_fix () {
  INPUT="$1"
  if [[ ${INPUT} =~ 'note:' ]]; then
    NOTE="${INPUT##note:}"
  else
    NOTE="${INPUT}"
  fi
  echo "${NOTE}"
}

# Remove action
shift

# Usage for todo.sh help
if [[ "${1}" = "usage" ]] || [[ "${1}" = "-h" ]]; then
  usage
  exit
elif ! [[ "$#" -eq 2 ]] ; then
  echo "    check number of options"
	usage
	exit 1
fi

OLD_FILE=$(_note_fix "$1")
NEW_FILE=$(_note_fix "$2")
PRE=$(basename "${TODO_FILE}" | sed 's/.txt$//g')
NOTES_DIR="${TODO_DIR}/notes"

cd "${NOTES_DIR}" || exit 

# Test the OLD_FILE is in the TODO_FILE or DONE_FILE and rename in 
# todo.txt and done.txt
RETURN=0
if [[ "$(grep -c "${OLD_FILE}" "${TODO_FILE}")" -ge 1 ]]; then
	sed -i "s/note:${OLD_FILE}\b/note:${NEW_FILE}/g" "${TODO_FILE}"
  echo "$(getPrefix): Changed note:${OLD_FILE} to note:${NEW_FILE} in todo.txt"
  ((UPDATE+=1))
  ((RETURN+=1))
fi
if [[ "$(grep -c "${OLD_FILE}" "${DONE_FILE}")" -ge 1 ]]; then
	sed -i "s/note:${OLD_FILE}\b/note:${NEW_FILE}/g" "${DONE_FILE}"
  echo "$(getPrefix): Changed note:${OLD_FILE} to note:${NEW_FILE} in done.txt"
  ((UPDATE+=1))
  ((RETURN+=1))
fi
if [[ "${UPDATE}" -eq 0 ]]; then
	echo "    ${OLD_FILE} is not a current note, use listnotes to find notes."
  usage
	exit 1
fi

# Test the OLD_FILE exists and RENAME
# Remove the note: to be used as filename
if [[ -f "${NOTES_DIR}/${PRE}-${OLD_FILE}.txt" ]]; then
	mv "${NOTES_DIR}/${PRE}-${OLD_FILE}.txt" "${NOTES_DIR}/${PRE}-${NEW_FILE}.txt"
fi

# Test for OLD_FILE in 'tickled' files and rename
if [[ -n ${TICKLER_DIR} ]]; then
	TICKLED="$(find "${TICKLER_DIR}" -mindepth 2 -type f -size 1 -exec grep -l "${OLD_FILE}" {} \;)"
	for FILE in ${TICKLED}; do
		# shellcheck disable=SC1117
		sed -i "s/note:${OLD_FILE}\b/note:${NEW_FILE}" "${FILE}"
    echo "$(getPrefix): Changed note:${OLD_FILE} to note:${NEW_FILE} in tickled file ${FILE}"
    ((RETURN+=1))
	done
fi

if [[ "${RETURN}" -gt 0 ]]; then
  exit 0
else
  exit 1
fi