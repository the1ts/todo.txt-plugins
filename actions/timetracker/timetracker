#!/usr/bin/env bash

# Timetracker action for todo.txt
# Gives timetracker stats for a project
# (C) 2012 Paul Mansfield
# License:  GPL, http://www.gnu.org/copyleft/gpl.html

usage() {
	echo "    $(basename "${0}") on|off|list|archive|unarchive|stats|archivedstats|statsall [project]"
	echo "      Track time spent on a project."
}

die () {
  [[ -f "${TODO_TMP_FILE}" ]] && rm -rf "${TODO_TMP_FILE}"
	exit 1
}

ttprep() {
	# Make directories that may be needed
	if [ ! -d "${TODO_DIR}/tt/${PRE}/" ]; then
		mkdir -p "${TODO_DIR}/tt/${PRE}"
	fi
	if [ ! -d "${TODO_DIR}/tt/${PRE}/archive" ]; then
		mkdir -p "${TODO_DIR}/tt/${PRE}/archive"
	fi
}

tttests () {
	# If we are getting stats, allow blank project
	if [[ -z "${1}" ]]; then
		if [[ $(echo "${action}" | grep -c 'list\|stats') -eq 1 ]]; then
			ALL=1
		elif [[ "$(echo "${action}" | grep -c 'list\|stats')" -eq 0 ]]; then
			usage
			echo "      No project given"
			die
		fi
	else
		# Remove + from project
		project="${1/#+/}"
		ALL=0
	fi
}

_start () {
	# if tt file doesn't exist start
	if ! [[ -f "${TODO_DIR}/tt/${PRE}/${project}.tt" ]]; then
		echo "$(date +"%s")" >> "${TODO_DIR}/tt/${PRE}/${project}.tt"
		echo "${1}"
		exit
	fi
	# If project file exists and if our last line has only two fields, then add time stamp
	if [ "$(tail -1 "${TODO_DIR}/tt/${PRE}/${project}.tt" | grep -c :)" -eq 1 ] ; then
		echo "$(date +"%s")" >> "${TODO_DIR}/tt/${PRE}/${project}.tt"
		echo "${1}"
		exit
	# Else the timer is still active
	else
		usage
		echo "      Project ${project} is still active, cannot turn on the clock"
		die
	fi
}

_stop () {
	set +x
	# Remove the state and set File location
	STATE=$1; shift
	if [[ "${STATE}" = "live" ]]; then
		FILE="${TODO_DIR}/tt/${PRE}/${project}"
	elif [[ "${STATE}" = "archived" ]]; then
		FILE="${TODO_DIR}/tt/${PRE}/archive/${project}"
	fi
	# Get start from last line of project tt file
	START=$(tail -1 "${FILE}.tt")
	# Current time
	END="$(date +"%s")"
	# Print all but last line, then start and end into temp file
	head -n -1 "${FILE}.tt"; echo "${START}:${END}" > "${FILE}.tmp"
	mv "${FILE}.tmp" "${FILE}.tt"
	echo "${1}"
	exit
}

# Usage for todo.sh help or remove action
# Remove todo.txt action name
if [[ "${2}" =~ (usage|help|--help) ]]; then
	usage
	die
elif [[ "${1}" = "$(basename "$0")" ]]; then
  shift
  action=$1
  shift
fi

# Setup some variables
PRE=$(basename "${TODO_FILE}" | sed 's/.txt$//g')

# Run our prep and tests
ttprep
tttests "$@"

# Setup some variables
CURRENT=$(find "${TODO_DIR}/tt/${PRE}/" -maxdepth 1 -name "*.tt" | awk -F / '{print $NF}' | sed 's/\.tt$//' | sort)
ARCHIVED=$(find "${TODO_DIR}/tt/${PRE}/archive/" -maxdepth 1 -name "*.tt" | awk -F / '{print $NF}' | sed 's/\.tt$//' | sort)

# Human style timings
tthuman () {
	TOTAL=$1
	RUNNING=$2
	DAYS=$((TOTAL / 86400))
	if [[ "${DAYS}" -gt 0 ]]; then
		TEXTDAYS="${DAYS} days "
	else
		TEXTDAYS=""
	fi
	# shellcheck disable=SC2034,SC2035
	REMOVEDAYS=$((TOTAL - DAYS * 86400))
	HOURS=$((REMOVEDAYS / 3600))
	if [ "${HOURS}" -gt 0 ]; then
		TEXTHOURS="${HOURS} hours "
	else
		TEXTHOURS=""
	fi
	# shellcheck disable=SC2034,SC2035
	REMOVEHOURS=$((REMOVEDAYS - HOURS * 3600))
	MINUTES=$((REMOVEHOURS / 60))
	if [[ "${MINUTES}" -gt 0 ]]; then
		TEXTMINUTES="${MINUTES} minutes "
	else
		TEXTMINUTES=""
	fi
	# shellcheck disable=SC2034,SC2035
		SECONDS=$((REMOVEHOURS - MINUTES * 60))
	if [[ "${SECONDS}" -gt 0 ]]; then
		TEXTSECONDS="${SECONDS} seconds "
	else
		TEXTSECONDS=""
	fi
}

# Archive the project tt file
ttarchive() {
	project="${1/#+/}"
	if [ -f "${TODO_DIR}/tt/${PRE}/${project}.tt" ]; then
		if [ "$(tail -1 "${TODO_DIR}/tt/${PRE}/${project}.tt" | grep -c :)" -eq 0 ]; then
			echo "$(cat "${TODO_DIR}/tt/${PRE}/${project}.tt"):$(date +%s)" >> "${TODO_DIR}/tt/${PRE}/archive/${project}.tt"
			rm "${TODO_DIR}/tt/${PRE}/${project}.tt" 
			echo "Setting project ${project} as finished now and archiving"
		else
			mv "${TODO_DIR}/tt/${PRE}/${project}.tt" "${TODO_DIR}/tt/${PRE}/archive/"
			echo "Archived ${project}"
		fi
	else
		usage
		echo "      Project ${project} does not exist"
		die
	fi
}

ttunarchive () {
	project="${1/#+/}"
	if [ -f "${TODO_DIR}/tt/${PRE}/archive/${project}.tt" ]; then
		mv "${TODO_DIR}/tt/${PRE}/archive/${project}.tt" "${TODO_DIR}/tt/${PRE}/${project}.tt"
		echo "Project ${project} unarchived"
	else
		usage
		echo "      Project ${project} not archived"
		die
	fi
}

ttlist () {
	if [ "${#CURRENT}" -gt 0 ] || [ "${#ARCHIVED}" -gt 0 ]; then
		echo "Projects being time tracked"
		echo "==========================="
		if [ ${#CURRENT} -gt 0 ]; then
			echo "Current"
			echo "-------"
			echo "$CURRENT"
			echo ""
		fi
		if [ ${#ARCHIVED} -gt 0 ]; then
			echo "Archived"
			echo "--------"
			echo "$ARCHIVED"
			echo ""
		fi
	else
		usage
		echo "      No files to list"
		die
	fi
}

ttsimplelist () {
    echo "${CURRENT}"
}

ttsimplearchivedlist () {
    echo "${ARCHIVED}"
}

ttsimplelistall () {
    echo "${CURRENT}"
		echo "${ARCHIVED}"
}

tton() {
	project="${1/#+/}"
	# if project is in todo.txt
	if [[ $(grep -c "+${project}" "${TODO_FILE}") -gt 0 ]]; then
		# if project tt file exists
		if [[ -f "${TODO_DIR}/tt/${PRE}/${project}.tt" ]]; then
			_start "Starting clock on ${project}"
		# if project tt archivefile exists
		elif [[ -f "${TODO_DIR}/tt/${PRE}/archive/${project}.tt" ]]; then
			echo "Project ${project} is archived, unarchive?"
			read -r -n1 -p "(y/n)"
			[[ $REPLY = [yY] ]] && mv "${TODO_DIR}/tt/${PRE}/archive/${project}.tt" "${TODO_DIR}/tt/${PRE}/${project}.tt" || { echo "Not unarchiving"; exit 1; }
			_start "Unarchiving and starting clock on ${project}"
		fi
		# if no tt file exits, start one
		_start "Starting clock on ${project}"
	# if project is not in todo.txt
	else
		usage
		echo "      Project ${project} is not in todo.txt"
		die
	fi
}

ttoff() {
	project="${1/#+/}"
	FILE="${TODO_DIR}/tt/${PRE}/${project}.tt"
	ARCHIVE="${TODO_DIR}/tt/${PRE}/archive/${project}.tt"
	# if project has a tt file started
	if [[ -f "${FILE}" ]] && [[ "$(tail -1 "${FILE}" | grep -c :)" -eq 0 ]] ; then
		_stop live "Stopping clock on ${project}"
	# if project has an archived tt file started
	elif [[ -f "${ARCHIVE}" ]] && [[ "$(tail -1 "${ARCHIVE}" | grep -c :)" -eq 0 ]] ; then
		_stop archived "Stopping clock on ${project} which is archived"
	# if project has neither tt file or archive file started
	elif [[ (-f "${FILE}" && "$(tail -1 "${FILE}" | grep -c :)" -eq 1 ) ]] && [[ (-f "${ARCHIVE}" && "$(tail -1 "${ARCHIVE}" | grep -c :)" -eq 1) ]]; then
		usage
		echo "      Project ${project} is not active"
		die
	# if project is not in todo.txt file
	elif [[ "$(grep -c "${project}" "${TODO_FILE}")" -eq 0  ]]; then
		usage
		echo "      Project ${project} does not exist in todo.txt"
		die
	# if project has no tt file nor archive file
	elif [[ ! -f "${TODO_DIR}/tt/${PRE}/${project}.tt"  ]] && [[ ! -f "${TODO_DIR}/tt/${PRE}/archive/${project}.tt" ]]; then
		usage
		echo "      No sign of tt file for project ${project}"
		die
	fi
}

# Show the stats for the project
ttstats() {
	project="${1/#+/}"
	if [ -f "${TODO_DIR}/tt/${PRE}/${project}.tt" ]; then
		if [ "$(tail -1 "${TODO_DIR}/tt/${PRE}/${project}.tt" | grep -c :)" -eq 0 ]; then
			TOTAL=$(echo $(cat "${TODO_DIR}/tt/${PRE}/${project}.tt"):$(date +%s) |awk -F ':' '{print $2 - $1}' | awk '{ sum+=$1} END {print sum}')
			RUNNING=1
		else
			TOTAL=$(echo "$(cat "${TODO_DIR}/tt/${PRE}/${project}.tt")" |awk -F ':' '{print $2 - $1}' | awk '{ sum+=$1} END {print sum}')
			RUNNING=0
		fi
		tthuman "${TOTAL}" "${RUNNING}"
		echo "Stats for Project: ${project}"
		CHAR=$(echo "Stats for Project: ${project}"| sed 's/./=/g')
		echo "${CHAR}"
		if [ ${RUNNING} -eq 1 ]; then
			echo "Timer still running for ${project}"
		fi
		echo "${TEXTDAYS}${TEXTHOURS}${TEXTMINUTES}${TEXTSECONDS}"
	else
		usage
		echo "      No current timetracker projects"
		die
	fi
}

ttarchivedstats () {
	project="${1/#+/}"
	if [ -f "${TODO_DIR}/tt/${PRE}/archive/${project}.tt" ]; then
		if [ "$(tail -1 "${TODO_DIR}/tt/${PRE}/archive/${project}.tt" | grep -c :)" -eq 0 ]; then
			TOTAL=$(echo $(cat "${TODO_DIR}/tt/${PRE}/archive/${project}.tt"):$(date +%s) |awk -F ':' '{print $2 - $1}' | awk '{ sum+=$1} END {print sum}')
			RUNNING=1
		else
			TOTAL=$(echo "$(cat "${TODO_DIR}/tt/${PRE}/archive/${project}.tt")" |awk -F ':' '{print $2 - $1}' | awk '{ sum+=$1} END {print sum}')
			RUNNING=0
		fi
			tthuman "${TOTAL}" "${RUNNING}"
		echo "Stats for archived Project: ${project}"
		CHAR=$(echo "Stats for archived Project: ${project}"| sed 's/./=/g')
		echo "${CHAR}"
		if [ ${RUNNING} -eq 1 ]; then
			echo "Timer still running for ${project}"
		fi
		echo "${TEXTDAYS}${TEXTHOURS}${TEXTMINUTES}${TEXTSECONDS}"
	else
		usage
		echo "      No current timetracker projects"
		die
	fi
}

# Main
case "${action}" in
	stats)
		# If no project was set, show all projects stats
		if [ ${ALL} -eq 1 ]; then
			if [[ "$(find "${TODO_DIR}/tt/${PRE}/" -type f -name "*.tt" | wc -l)" -eq 0 ]]; then
				usage
				echo "      No timetracker projects exist"
				die
			fi
			cd "${TODO_DIR}/tt/${PRE}/" || exit 1
			for project in *.tt; do
				project="${project/#+/}"
				ttstats "${@}"
			done
		else
			ttstats "${@}"
		fi
	;;
	archivedstats)
		# If no project was set, show all projects stats
		if [ ${ALL} -eq 1 ]; then
			if [[ "$(find "${TODO_DIR}/tt/${PRE}/archive/" -type f -name "*.tt" | wc -l)" -eq 0 ]]; then
				usage
				echo "      No timetracker projects exist"
				die
			fi
			cd "${TODO_DIR}/tt/${PRE}/archive" || exit 1
			for project in *.tt; do
				project="${project/#+/}"
				ttarchivedstats "${project}"
			done
		else
			ttarchivedstats "${@}"
		fi
	;;
	statsall)
		# If we have not projects, error out
		if [[ -z "${CURRENT}" ]] && [[ -z "${ARCHIVED}" ]]; then
			usage
			echo "      No timetracker projects exist"
			die
		fi
		# If we have current projects
		if [[ -n "${CURRENT}" ]]; then
			for project in $(ttsimplelist); do
				ttstats "${project}"
			done
		fi
		# If we have archived projects
		if [[ -n "${ARCHIVED}" ]]; then
			for project in $(ttsimplearchivedlist); do
				ttarchivedstats "${project}"
			done
		fi
	;;
	on)
		tton "$@"
	;;
	off)
		ttoff "$@"
	;;
	list)
		ttlist
	;;
	archive)
		ttarchive "$@"
	;;
	unarchive)
		ttunarchive "$@"
	;;
	simplelist)
		ttsimplelist
	;;
	simplearchivedlist)
		ttsimplearchivedlist
	;;
	simplelistall)
		ttsimplelistall
	;;
	*)
		usage
	;;
esac

